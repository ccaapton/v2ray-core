// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v2ray.com/core/transport/internet/domainsocket/config.proto

package domainsocket

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	serial "v2ray.com/core/common/serial"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Config struct {
	// Path of the domain socket. This overrides the IP/Port parameter from upstream caller.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Abstract speicifies whether to use abstract namespace or not.
	// Traditionally Unix domain socket is file system based. Abstract domain socket can be used without acquiring file lock.
	Abstract       bool                 `protobuf:"varint,2,opt,name=abstract,proto3" json:"abstract,omitempty"`
	HeaderSettings *serial.TypedMessage `protobuf:"bytes,3,opt,name=header_settings,json=headerSettings,proto3" json:"header_settings,omitempty"`
	// Path of the domain socket. This overrides the IP/Port parameter from
	// upstream caller.
	// connect(2) or bind(2) when using abstract UDS.
	Padding              bool     `protobuf:"varint,4,opt,name=padding,proto3" json:"padding,omitempty"`
	AcceptProxyProtocol  bool     `protobuf:"varint,5,opt,name=acceptProxyProtocol,proto3" json:"acceptProxyProtocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_76473d52e3e3815d, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Config) GetAbstract() bool {
	if m != nil {
		return m.Abstract
	}
	return false
}

func (m *Config) GetHeaderSettings() *serial.TypedMessage {
	if m != nil {
		return m.HeaderSettings
	}
	return nil
}

func (m *Config) GetPadding() bool {
	if m != nil {
		return m.Padding
	}
	return false
}

func (m *Config) GetAcceptProxyProtocol() bool {
	if m != nil {
		return m.AcceptProxyProtocol
	}
	return false
}

func init() {
	proto.RegisterType((*Config)(nil), "v2ray.core.transport.internet.domainsocket.Config")
}

func init() {
	proto.RegisterFile("v2ray.com/core/transport/internet/domainsocket/config.proto", fileDescriptor_76473d52e3e3815d)
}

var fileDescriptor_76473d52e3e3815d = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x49, 0xad, 0xb5, 0x46, 0x50, 0x88, 0x97, 0xa5, 0xa7, 0xe2, 0x41, 0x4a, 0x0f, 0x49,
	0xa9, 0x47, 0x6f, 0xd6, 0x8b, 0x07, 0xb1, 0x6c, 0x8b, 0x07, 0x2f, 0x25, 0xcd, 0x8e, 0xdb, 0xc5,
	0x6e, 0x26, 0x24, 0x83, 0xb8, 0x4f, 0xe1, 0x7b, 0xf8, 0x3e, 0xbe, 0x8f, 0x6c, 0xd6, 0x2d, 0x45,
	0x3c, 0xe8, 0x6d, 0x87, 0x9d, 0xef, 0xff, 0x3f, 0x26, 0xfc, 0xfa, 0x75, 0xea, 0x75, 0x25, 0x0d,
	0x96, 0xca, 0xa0, 0x07, 0x45, 0x5e, 0xdb, 0xe0, 0xd0, 0x93, 0x2a, 0x2c, 0x81, 0xb7, 0x40, 0x2a,
	0xc3, 0x52, 0x17, 0x36, 0xa0, 0x79, 0x01, 0x52, 0x06, 0xed, 0x73, 0x91, 0x4b, 0xe7, 0x91, 0x50,
	0x8c, 0x5b, 0xd8, 0x83, 0xdc, 0x81, 0xb2, 0x05, 0xe5, 0x3e, 0x38, 0x98, 0xfc, 0x28, 0x32, 0x58,
	0x96, 0x68, 0x55, 0x00, 0x5f, 0xe8, 0xad, 0xa2, 0xca, 0x41, 0xb6, 0x2a, 0x21, 0x04, 0x9d, 0x43,
	0x93, 0x7e, 0xf1, 0xc9, 0x78, 0x6f, 0x16, 0xeb, 0x84, 0xe0, 0x5d, 0xa7, 0x69, 0x93, 0xb0, 0x21,
	0x1b, 0x1d, 0xa7, 0xf1, 0x5b, 0x0c, 0x78, 0x5f, 0xaf, 0x03, 0x79, 0x6d, 0x28, 0xe9, 0x0c, 0xd9,
	0xa8, 0x9f, 0xee, 0x66, 0xf1, 0xc0, 0xcf, 0x36, 0xa0, 0x33, 0xf0, 0xab, 0x00, 0x44, 0x85, 0xcd,
	0x43, 0x72, 0x30, 0x64, 0xa3, 0x93, 0xe9, 0xa5, 0xdc, 0x53, 0x6e, 0x14, 0x64, 0xa3, 0x20, 0x97,
	0xb5, 0xc2, 0x7d, 0x63, 0x90, 0x9e, 0x36, 0xf8, 0xe2, 0x9b, 0x16, 0x09, 0x3f, 0x72, 0x3a, 0xcb,
	0x0a, 0x9b, 0x27, 0xdd, 0xd8, 0xd5, 0x8e, 0x62, 0xc2, 0xcf, 0xb5, 0x31, 0xe0, 0x68, 0xee, 0xf1,
	0xad, 0x9a, 0xd7, 0xe6, 0x06, 0xb7, 0xc9, 0x61, 0xdc, 0xfa, 0xed, 0xd7, 0xcd, 0x3b, 0xe3, 0x75,
	0xb5, 0xfc, 0xfb, 0xf1, 0xe6, 0xec, 0x49, 0xfe, 0xef, 0x9d, 0x3e, 0x3a, 0xe3, 0xc7, 0x69, 0xaa,
	0x2b, 0x39, 0xab, 0xe3, 0x97, 0xbb, 0xf8, 0xbb, 0x36, 0xfe, 0x36, 0x2e, 0x2f, 0xe2, 0xf2, 0xba,
	0x17, 0x0f, 0x7e, 0xf5, 0x15, 0x00, 0x00, 0xff, 0xff, 0x95, 0x3f, 0x69, 0x19, 0x0d, 0x02, 0x00,
	0x00,
}
